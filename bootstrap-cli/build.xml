<project>
	<target name="patch-modules" depends="patch-log4j-slf4j" />
	<target name="patch-log4j-slf4j">
		<patch-jar patch.basename="tinylog-api" patch.module="org.tinylog.api" />
		<patch-jar patch.basename="tinylog-impl" patch.module="org.tinylog.impl" />
		<patch-jar patch.basename="slf4j-tinylog" patch.module="org.tinylog.api.slf4j" />
		<patch-jar patch.basename="jul-to-slf4j" patch.module="jul.to.slf4j" />
		<patch-jar patch.basename="jline-terminal" patch.module="jline.terminal" />
	</target>
	<macrodef name="patch-jar">
		<attribute name="patch.basename" />
		<attribute name="patch.module" />
		<sequential>
			<local name="patch.outputDirectory" />
			<property name="patch.outputDirectory" value="${project.build.directory}/patches/@{patch.basename}" />
			
			<first id="patch.jar">
				<fileset id="patch.jars" dir="${project.build.directory}/dependency">
					<filename regex="@{patch.basename}-[0-9].*.jar" />
				</fileset>
			</first>
			<fail message="@{patch.basename} jar not found">
				<condition>
					<not>
						<resourcecount count="1" refid="patch.jars" property="test" />
					</not>
				</condition>
			</fail>
			
			<mkdir dir="${patch.outputDirectory}" />
			<javac srcdir="patches/@{patch.basename}" includeantruntime="false" destdir="${patch.outputDirectory}">
				<compilerarg value="--module-path" />
				<compilerarg value="${project.build.directory}/dependency" />
				<compilerarg value="--patch-module" />
				<compilerarg value="@{patch.module}=${toString:patch.jar}" />
			</javac>
			<zip update="true" destfile="${toString:patch.jar}" basedir="${patch.outputDirectory}" whenempty="fail">
				<fileset file="module-info.class" />
			</zip>
		</sequential>
	</macrodef>
</project>